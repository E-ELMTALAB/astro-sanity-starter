---
import { type SiteConfig, type CustomImage } from 'types';
import Footer from '@components/Footer.astro';
import Header from '@components/Header.astro';
import { fetchData } from '@data/siteConfig';

import '../styles/globals.css';

interface Props {
    title: string;
    addTitleSuffix?: boolean;
    description?: string;
    image?: CustomImage;
}

const { addTitleSuffix, description, image } = Astro.props;

let configData: SiteConfig = {};
try {
    configData = (await fetchData()) || {};
} catch (e) {
    configData = {};
}

const titleSuffix = configData.titleSuffix && addTitleSuffix !== false ? configData.titleSuffix : undefined;
const title = [Astro.props.title, titleSuffix].filter(Boolean).join(' | ');

const site = typeof Astro.site === 'string' && Astro.site.length > 0 ? Astro.site : undefined;

function toAbsoluteUrl(value?: string | null) {
    if (!value) return undefined;
    if (site) {
        try {
            return new URL(value, site).toString();
        } catch {
            // fall through to check for fully qualified URLs
        }
    }
    return /^https?:\/\//.test(value) ? value : undefined;
}

function resolveCanonicalUrl() {
    const requestUrl = typeof Astro.request?.url === 'string' ? Astro.request.url : undefined;
    if (site) {
        try {
            return new URL(requestUrl ?? '/', site);
        } catch {
            try {
                return new URL('/', site);
            } catch {
                return undefined;
            }
        }
    }
    if (requestUrl && /^https?:\/\//.test(requestUrl)) {
        try {
            return new URL(requestUrl);
        } catch {
            return undefined;
        }
    }
    return undefined;
}

const resolvedImageSrc = toAbsoluteUrl(image?.src);
const resolvedImage = resolvedImageSrc ? { src: resolvedImageSrc } : undefined;
const canonicalURL = resolveCanonicalUrl();
const canonicalHref = canonicalURL ? formatCanonicalURL(canonicalURL) : undefined;

/**
 * Enforce some standard canonical URL formatting across the site.
 */
function formatCanonicalURL(url: string | URL) {
    let normalized = url.toString();
    const hasQueryParams = normalized.includes('?');
    // If there are query params, make sure the URL has no trailing slash
    if (hasQueryParams) {
        normalized = normalized.replace(/\/?$/, '');
    }
    // otherwise, canonical URL always has a trailing slash
    return normalized.replace(/\/?$/, hasQueryParams ? '' : '/');
}
---

<!doctype html>
<html lang="en" data-theme="light">
    <head>
        <!-- High Priority Global Metadata -->
        <meta charset="utf-8" />
        <meta name="viewport" content="width=device-width,initial-scale=1" />
        <title>{title}</title>
        <meta name="generator" content={Astro.generator} />

        <!-- Fonts -->
        <link rel="preconnect" href="https://fonts.googleapis.com" />
        <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
        <link href="https://fonts.googleapis.com/css2?family=Mulish:ital,wght@0,400..900;1,400..900&display=swap" rel="stylesheet" />

        <!-- Low Priority Global Metadata -->
        {configData.favicon?.src && <link rel="icon" type="image/svg+xml" href={configData.favicon.src} />}
        <link rel="sitemap" href="/sitemap-index.xml" />

        <!-- Page Metadata -->
        {canonicalHref && <link rel="canonical" href={canonicalHref} />}
        {description && <meta name="description" content={description} />}

        <!-- Open Graph / Facebook -->
        {canonicalHref && <meta property="og:url" content={canonicalHref} />}
        <meta property="og:title" content={title} />
        {description && <meta property="og:description" content={description} />}
        {resolvedImage?.src && <meta property="og:image" content={resolvedImage.src} />}

        <!-- X/Twitter -->
        <meta property="twitter:card" content="summary_large_image" />
        {canonicalHref && <meta property="twitter:url" content={canonicalHref} />}
        <meta property="twitter:title" content={title} />
        {description && <meta property="twitter:description" content={description} />}
        {resolvedImage?.src && <meta property="twitter:image" content={resolvedImage.src} />}
    </head>
    <body class="antialiased">
        <Header {...configData.header} data-sb-field-path={`${configData._id}:header`} />
        <slot />
        <Footer {...configData.footer} data-sb-field-path={`${configData._id}:footer`} />
        <script is:inline>
            window.addEventListener('stackbitObjectsChanged', () => {
                window.location.reload();
            });
        </script>
    </body>
</html>
