import process from 'node:process';
import path from 'node:path';
import { inspect } from 'node:util';

const DEFAULT_SECTIONS = [
    'heroCarouselSection',
    'storiesSection',
    'categoriesSection',
    'flashSaleSection',
    'featuredProductsSection',
    'supportSection'
];

function getSections() {
    const specific = process.env.SECTION?.trim();
    return specific ? [specific] : DEFAULT_SECTIONS;
}

async function runSanityChecks() {
    console.log('üîç Running Sanity CMS Tests...');
    const sanityChecks = await import('./checks/sanity.mts');
    const sections = getSections();

    for (const section of sections) {
        console.log(`  üìã Testing section: ${section}`);

        try {
            await sanityChecks.checkSchemaExists(section);
            console.log(`    ‚úÖ Schema exists: ${section}`);
        } catch (error) {
            console.log(`    ‚ùå Schema missing: ${section}`);
            throw error;
        }

        try {
            await sanityChecks.checkSectionRegisteredInPage(section);
            console.log(`    ‚úÖ Section registered in page: ${section}`);
        } catch (error) {
            console.log(`    ‚ùå Section not registered: ${section}`);
            throw error;
        }

        try {
            await sanityChecks.checkSchemaRegisteredInIndex(section);
            console.log(`    ‚úÖ Schema registered in index: ${section}`);
        } catch (error) {
            console.log(`    ‚ùå Schema not registered in index: ${section}`);
            throw error;
        }

        try {
            await sanityChecks.checkSchemaStructure(section);
            console.log(`    ‚úÖ Schema structure valid: ${section}`);
        } catch (error) {
            console.log(`    ‚ùå Schema structure invalid: ${section}`);
            throw error;
        }

        try {
            await sanityChecks.checkNestedObjectSchemas(section);
            console.log(`    ‚úÖ Nested object schemas valid: ${section}`);
        } catch (error) {
            console.log(`    ‚ùå Nested object schemas invalid: ${section}`);
            throw error;
        }

        try {
            await sanityChecks.checkGroqProjectsIdsAndImages(section);
            console.log(`    ‚úÖ GROQ projection valid: ${section}`);
        } catch (error) {
            console.log(`    ‚ùå GROQ projection invalid: ${section}`);
            throw error;
        }

        try {
            await sanityChecks.checkGroqImageProjections(section);
            console.log(`    ‚úÖ GROQ image projections valid: ${section}`);
        } catch (error) {
            console.log(`    ‚ùå GROQ image projections invalid: ${section}`);
            throw error;
        }
    }
    console.log('‚úÖ All Sanity tests passed!\n');
}

async function runStackbitChecks() {
    console.log('üé® Running Stackbit Tests...');
    const stackbitChecks = await import('./checks/stackbit.mts');
    const sections = getSections();

    for (const section of sections) {
        console.log(`  üìã Testing section: ${section}`);

        try {
            await stackbitChecks.checkModelExists(section);
            console.log(`    ‚úÖ Model exists: ${section}`);
        } catch (error) {
            console.log(`    ‚ùå Model missing: ${section}`);
            throw error;
        }

        try {
            await stackbitChecks.checkModelNameMatchesSchema(section);
            console.log(`    ‚úÖ Model name matches: ${section}`);
        } catch (error) {
            console.log(`    ‚ùå Model name mismatch: ${section}`);
            throw error;
        }

        try {
            await stackbitChecks.checkModelImportsCommonFields(section);
            console.log(`    ‚úÖ Model imports commonFields: ${section}`);
        } catch (error) {
            console.log(`    ‚ùå Model missing commonFields: ${section}`);
            throw error;
        }

        try {
            await stackbitChecks.checkModelRegisteredInIndex(section);
            console.log(`    ‚úÖ Model registered in index: ${section}`);
        } catch (error) {
            console.log(`    ‚ùå Model not registered in index: ${section}`);
            throw error;
        }

        try {
            await stackbitChecks.checkModelFieldsCoverSchema(section);
            console.log(`    ‚úÖ Model fields complete: ${section}`);
        } catch (error) {
            console.log(`    ‚ùå Model fields incomplete: ${section}`);
            throw error;
        }
    }
    console.log('‚úÖ All Stackbit tests passed!\n');
}

async function runRenderChecks() {
    console.log('üéØ Running Render Tests...');
    const annotationChecks = await import('./checks/annotations.mts');
    const resolutionChecks = await import('./checks/annotation-resolution.mts');
    const ctaChecks = await import('./checks/cta.mts');
    const distDir = process.env.DIST_DIR ? path.resolve(process.env.DIST_DIR) : undefined;

    try {
        await annotationChecks.checkPageWrapperHasObjectId(distDir);
        console.log('  ‚úÖ Page wrapper has object ID');
    } catch (error) {
        console.log('  ‚ùå Page wrapper missing object ID');
        throw error;
    }

    try {
        await annotationChecks.checkSectionRootsHaveIndexes(distDir);
        console.log('  ‚úÖ Section roots have proper indexes');
    } catch (error) {
        console.log('  ‚ùå Section roots missing proper indexes');
        throw error;
    }

    try {
        await annotationChecks.checkFieldLevelAnnotations(distDir);
        console.log('  ‚úÖ Field level annotations valid');
    } catch (error) {
        console.log('  ‚ùå Field level annotations invalid');
        throw error;
    }

    try {
        await annotationChecks.checkFieldNameMatching(distDir);
        console.log('  ‚úÖ Field names match schema (camelCase)');
    } catch (error) {
        console.log('  ‚ùå Field names do not match schema');
        throw error;
    }

    try {
        await annotationChecks.checkArrayAnnotationRules(distDir);
        console.log('  ‚úÖ Array annotation rules valid');
    } catch (error) {
        console.log('  ‚ùå Array annotation rules invalid');
        throw error;
    }

    try {
        await annotationChecks.checkFieldPathHierarchy(distDir);
        console.log('  ‚úÖ Field path hierarchy valid');
    } catch (error) {
        console.log('  ‚ùå Field path hierarchy invalid');
        throw error;
    }

    try {
        await annotationChecks.checkImageAnnotationRule(distDir);
        console.log('  ‚úÖ Image annotation rules valid');
    } catch (error) {
        console.log('  ‚ùå Image annotation rules invalid');
        throw error;
    }

    try {
        await resolutionChecks.checkAnnotationResolution(distDir);
        console.log('  ‚úÖ Annotation resolution to page JSON valid');
    } catch (error) {
        console.log('  ‚ùå Annotation resolution invalid');
        throw error;
    }

    try {
        await ctaChecks.checkHomeCtasPointToCheckout(distDir);
        console.log('  ‚úÖ CTA links point to checkout');
    } catch (error) {
        console.log('  ‚ùå CTA links invalid');
        throw error;
    }

    console.log('‚úÖ All render tests passed!\n');
}

async function runLegacyChecks() {
    console.log('üßπ Running Legacy Cleanup Tests...');
    const legacyChecks = await import('./checks/legacy.mts');

    try {
        await legacyChecks.checkNoLegacyStarterArtifacts();
        console.log('  ‚úÖ No legacy starter artifacts found');
        console.log('‚úÖ All legacy tests passed!\n');
    } catch (error) {
        console.log('  ‚ùå Legacy starter artifacts found');
        throw error;
    }
}

async function runTypeScriptChecks() {
    console.log('üìù Running TypeScript Tests...');
    const typescriptChecks = await import('./checks/typescript.mts');

    try {
        await typescriptChecks.checkTypeScriptCompliance();
        console.log('  ‚úÖ TypeScript compliance valid');
    } catch (error) {
        console.log('  ‚ùå TypeScript compliance invalid');
        throw error;
    }

    console.log('‚úÖ All TypeScript tests passed!\n');
}

async function runComponentChecks() {
    console.log('üß© Running Component Architecture Tests...');
    const componentChecks = await import('./checks/components.mts');

    try {
        await componentChecks.checkComponentArchitecture();
        console.log('  ‚úÖ Component architecture valid');
    } catch (error) {
        console.log('  ‚ùå Component architecture invalid');
        throw error;
    }

    console.log('‚úÖ All component tests passed!\n');
}

async function runHomepageChecks() {
    console.log('üè† Running Homepage Integration Tests...');
    const homepageChecks = await import('./checks/homepage.mts');

    try {
        await homepageChecks.checkHomepageIntegration();
        console.log('  ‚úÖ Homepage integration valid');
    } catch (error) {
        console.log('  ‚ùå Homepage integration invalid');
        throw error;
    }

    console.log('‚úÖ All homepage tests passed!\n');
}

async function runReactChecks() {
    console.log('‚öõÔ∏è Running React Setup Tests...');
    const reactChecks = await import('./checks/react.mts');

    try {
        await reactChecks.checkReactSetup();
        console.log('  ‚úÖ React setup valid');
    } catch (error) {
        console.log('  ‚ùå React setup invalid');
        throw error;
    }

    console.log('‚úÖ All React tests passed!\n');
}

async function runContentChecks() {
    console.log('üìÑ Running Content Requirements Tests...');
    const contentChecks = await import('./checks/content.mts');

    try {
        await contentChecks.checkContentRequirements();
        console.log('  ‚úÖ Content requirements valid');
    } catch (error) {
        console.log('  ‚ùå Content requirements invalid');
        throw error;
    }

    console.log('‚úÖ All content tests passed!\n');
}

async function runSafetyChecks() {
    console.log('üõ°Ô∏è Running Deployment Safety Tests...');
    const safetyChecks = await import('./checks/safety.mts');

    try {
        await safetyChecks.checkDeploymentSafety();
        console.log('  ‚úÖ Deployment safety valid');
    } catch (error) {
        console.log('  ‚ùå Deployment safety invalid');
        throw error;
    }

    console.log('‚úÖ All safety tests passed!\n');
}

async function main() {
    const mode = process.argv[2];
    console.log(`üöÄ Starting test suite: ${mode.toUpperCase()}\n`);

    try {
        switch (mode) {
            case 'sanity':
                await runSanityChecks();
                break;
            case 'stackbit':
                await runStackbitChecks();
                break;
            case 'render':
                await runRenderChecks();
                break;
            case 'legacy':
                await runLegacyChecks();
                break;
            case 'typescript':
                await runTypeScriptChecks();
                break;
            case 'components':
                await runComponentChecks();
                break;
            case 'homepage':
                await runHomepageChecks();
                break;
            case 'react':
                await runReactChecks();
                break;
            case 'content':
                await runContentChecks();
                break;
            case 'safety':
                await runSafetyChecks();
                break;
            case 'all':
                await runSanityChecks();
                await runStackbitChecks();
                await runTypeScriptChecks();
                await runComponentChecks();
                await runHomepageChecks();
                await runReactChecks();
                await runContentChecks();
                await runSafetyChecks();
                await runLegacyChecks();
                await runRenderChecks();
                break;
            default:
                throw new Error('Usage: node tests/run.mts <sanity|stackbit|render|legacy|typescript|components|homepage|react|content|safety|all>');
        }

        console.log('üéâ ALL TESTS PASSED! üéâ');
        console.log('‚ú® Your project is ready to go!');

    } catch (error) {
        console.log('\nüí• TESTS FAILED! üí•');
        console.log('‚ùå Please fix the issues above before continuing.');
        throw error;
    }
}

main().catch((error) => {
    const message =
        error instanceof Error ? error.message : typeof error === 'string' ? error : inspect(error, { depth: 5 });
    console.error(message);
    process.exit(1);
});
